{"mappings":"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","sources":["src/services/MovieObjectByID.js","src/services/modalTemplate.js"],"sourcesContent":["import { getMovies } from \"./getMovies\";\n\nexport async function getMovieByID(id) {\n    const nul = null;\n    try {\n        const movieObj = await getMovies(`/movie/${id}`, nul, 1)\n        console.log(movieObj.data); //прилітає об'єкт з детальною інформацією\n        return movieObj.data\n    } catch (error) {\n        console.error(error);\n    }\n}\n\n//!!!!!!! функція не підключена до index.html\n// console.log(getMovieByID(990691));\n\n\n//id-шники для прикладу\n// 990691\n// 718789\n// 453395","import { getMovieByID } from './MovieObjectByID';\nimport {\n  getWatchedMoviesInStorage,\n  getQueueMoviesInStorage,\n} from './myLibraryPage';\n\nconst openModalCard = document.querySelector('[data-modalCard-open]');\nconst closeModalCard = document.querySelector('[data-modalCard-close]');\nconst modalCardCont = document.querySelector('[data-modalCard]');\nconst backdrop = document.querySelector('[backdrop]');\nconst cardContMarking = document.querySelector('.card__cont-marking');\nconst cardTableContainer = document.querySelector('.card__table');\nconst addToLSButtons = document.querySelectorAll('[data-add-to]');\n\nopenModalCard.addEventListener('click', onOpenModalCard);\ncloseModalCard.addEventListener('click', onCloseModalCard);\nmodalCardCont.addEventListener('click', onBackModalDropClick);\nwindow.addEventListener('keydown', onEscClick);\n\nlet currentMovie = null;\n\nfunction onCloseModalCard() {\n  modalCardCont.classList.add('no-activ');\n  const htmlEl = document.getElementsByTagName('HTML')[0];\n  htmlEl.classList.remove('no-scroll');\n  cardContMarking.innerHTML = '';\n  cardTableContainer.innerHTML = '';\n}\n\nfunction onBackModalDropClick(evt) {\n  if (!evt.target.classList.contains('card__cont')) {\n    return;\n  }\n  onCloseModalCard();\n}\n\nfunction onEscClick(evt) {\n  if (evt.key === 'Escape') {\n    onCloseModalCard();\n    backdrop.classList.add('is-hidden');\n  }\n}\n\nfunction onOpenModalCard(event) {\n  if (event.target.classList.contains('grid-movie-card')) {\n    const filmID = event.target.attributes.id.value;\n\n    getMovieByID(filmID).then(res => cardMarkUp(res));\n\n    modalCardCont.classList.remove('no-activ');\n    const htmlEl = document.getElementsByTagName('HTML')[0];\n    htmlEl.classList.add('no-scroll');\n  }\n  return;\n}\n\nfunction cardMarkUp(filmObject) {\n\n  // checkMovieByIdWatched(filmObject, 'watched');\n  // checkMovieByIdQueue(filmObject, 'queue');\n\n  let markUPImg = `<img class=\"card__img\" src=\"http://image.tmdb.org/t/p/w500${filmObject.poster_path}\" alt=\"${filmObject.title}\" />`;\n  // if (filmObject.poster_path) {\n  //   markUPImg = `<img class=\"card__img\" src=\"http://image.tmdb.org/t/p/w500${filmObject.poster_path}\" alt=\"${filmObject.title}\" />`;\n  // } else {\n  //   markUPImg = `<img class=\"card__img\" src=\"./img/placeholder.jpeg\" alt=\"${filmObject.title}\" />`;\n  // }\n\n  currentMovie = filmObject;\n  cardContMarking.insertAdjacentHTML('afterbegin', markUPImg);\n\n  const trimMarkupVote = trimMarkup(filmObject.vote_average);\n  const trimMarkupPopular = trimMarkup(filmObject.popularity);\n\n  let markupGenre = filmObject.genres;\n  let cardGenre\n  if (!filmObject.genres.length === 0) {\n    cardGenre = markupGenre.map(genr => genr.name);\n  } else {\n    cardGenre = \"No information\"\n  }\n\n  // cardGenre: markupGenre.length > 0 ? cardGenre.join(', ') : 'Unknown';\n\n  const markUp = `<h1 class=\"card__table-heder\">${filmObject.title}</h1>\n      <table class=\"card__table\">\n        <tr class=\"card__table-vote\">\n          <td class=\"card__table-name \">Vote / Votes</td>\n          <td class=\"card__table-value \"><span class=\"average\">${trimMarkupVote}</span> / <span class=\"vote\">${filmObject.vote_count}</span></td>\n        </tr>\n        <tr class=\"card__table-popularity\">\n          <td class=\"card__table-name\">Popularity</td>\n          <td class=\"card__table-value\">${trimMarkupPopular}</td>\n        </tr>\n        <tr class=\"card__table-title\">\n          <td class=\"card__table-name\">Original Title</td>\n          <td class=\"card__table-value\">${filmObject.title}</td>\n        </tr>\n        <tr class=\"card__table-genre\">\n          <td class=\"card__table-name last-child\">Genre</td>\n          <td class=\"card__table-value last-child\">${cardGenre}</td>\n        </tr>\n      </table>\n      <div class=\"card__about\">\n        <h2 class=\"card__about-heder\">About</h2>\n        <p class=\"card__about-text\">${filmObject.overview}</p>\n      </div>`;\n  cardTableContainer.insertAdjacentHTML('afterbegin', markUp);\n  addToLSButtons.forEach(btn => btn.addEventListener('click', onModalBtnClick));\n}\n\nfunction onModalBtnClick(e) {\n  const { addTo } = e.currentTarget.dataset;\n\n  addMoviesToStorage(addTo, currentMovie);\n  toggleBtn(addTo);\n\n  const activeBtn = document.querySelector(`.modal-${addTo}`);\n  checkPlace(activeBtn);\n}\n\nfunction checkPlace(btn) {\n  return (\n    btn.classList.contains('is-active')\n  );\n}\n\nfunction toggleBtn(key) {\n  const classActive = 'modal__btn--active';\n  const btn = document.querySelector(`.modal-${key}`);\n\n  if (btn.classList.contains(classActive)) {\n    btn.classList.remove(classActive);\n    btn.textContent = 'Add to ' + key;\n    return;\n  }\n\n  btn.classList.add(classActive);\n  btn.textContent = 'Remove from ' + key;\n}\n\nfunction addMoviesToStorage(key, movie) {\n  const watchedMovieInStorage = localStorage.getItem(key);\n  if (!watchedMovieInStorage) {\n    localStorage.setItem(key, JSON.stringify([movie]));\n    return;\n  }\n  let watchedMovies = JSON.parse(watchedMovieInStorage);\n  const watchedMoviesInStorageArr = watchedMovies.find(\n    item => item.id === addWatchedMovie.id\n\n  );\n  if (watchedMoviesInStorageArr) {\n    localStorage.setItem(key, JSON.stringify(watchedMovies));\n  } else {\n    watchedMovies.push(addWatchedMovie);\n    localStorage.setItem(KEY_WATCHED, JSON.stringify(watchedMovies));\n  }\n}\n\nfunction addQueueMoviesInStorage(addQueueMovie) {\n  const queueMovieInStorage = localStorage.getItem(KEY_QUEUE);\n  if (!queueMovieInStorage) {\n    localStorage.setItem(KEY_QUEUE, JSON.stringify([addQueueMovie]));\n    return;\n  }\n  let queueMovies = JSON.parse(queueMovieInStorage);\n  const queueMoviesInStorageArr = queueMovies.find(\n    item => item.id === addQueueMovie.id\n  );\n  if (queueMoviesInStorageArr) {\n    localStorage.setItem(KEY_QUEUE, JSON.stringify(queueMovies));\n  } else {\n    queueMovies.push(addQueueMovie);\n    localStorage.setItem(KEY_QUEUE, JSON.stringify(queueMovies));\n\n  }\n}\n\nfunction trimMarkup(trim) {\n  const trimMarkup = trim.toFixed(1);\n  return trimMarkup;\n}\n\n// function checkMovieByIdWatched(movie, key) {\n//   const lockalStorageId = JSON.parse(localStorage.getItem(key)) || [];\n//   console.log(lockalStorageId, 'Просмотренные фильмы');\n//   const includesMovie = lockalStorageId.find(elem => elem.id === movie.id);\n//   console.log(includesMovie, 'нука');\n//   if (!includesMovie) {\n//     addToWatchedButton.addEventListener('click', () =>\n//       addWatchedMoviesInStorage(movie)\n//     );\n//     addToWatchedButton.textContent = 'Add to watched';\n//   } else if (includesMovie) {\n//     addToWatchedButton.addEventListener('click', () =>\n//       removeMovieFromWatched(movie, key)\n//     );\n//     addToWatchedButton.textContent = 'Remove from watched';\n//   }\n// }\n// function checkMovieByIdQueue(movie, key) {\n//   const lockalStorageId = JSON.parse(localStorage.getItem(key)) || [];\n//   console.log(lockalStorageId, 'Просмотренные фильмы');\n//   const includesMovie = lockalStorageId.find(elem => elem.id === movie.id);\n\n//   if (!includesMovie) {\n//     console.log(lockalStorageId.includes(includesMovie));\n//     addToQueueButton.addEventListener('click', () =>\n//       addQueueMoviesInStorage(movie)\n//     );\n//     addToQueueButton.textContent = 'Add to queue';\n//   } else if (includesMovie) {\n//     addToQueueButton.addEventListener('click', () =>\n//       removeMovieFromQueue(movie, key)\n//     );\n//     addToQueueButton.textContent = 'Remove from queue';\n//   }\n// }\n\n// function removeMovieFromWatched(movie) {\n//   const localStorageArr = JSON.parse(localStorage.getItem(KEY_WATCHED));\n//   const includesMovie = localStorageArr.find(elem => elem.id === movie.id);\n//   if (includesMovie) {\n//     const updatedArr = localStorageArr.filter(elem => elem.id !== movie.id);\n//     localStorage.setItem(KEY_WATCHED, JSON.stringify(updatedArr));\n//   }\n\n// Dynamic changing text-content on modal buttons\n\naddToQueueButton.addEventListener('click', () => {\n  if (addToQueueButton.textContent == 'Remove from queue') {\n    addToQueueButton.textContent = 'Removed from Queue';\n    addToQueueButton.classList.add('card-buton-change');\n  }\n  if (addToQueueButton.textContent == 'Add to queue') {\n    addToQueueButton.textContent = 'Added to Queue';\n    addToQueueButton.classList.add('card-buton-change');\n  }\n});\n\n// addToQueueButton.addEventListener('click', () => {\n//   if (addToQueueButton.textContent == \"Remove from queue\") {\n//     addToQueueButton.textContent = \"Removed from Queue\"\n//     addToQueueButton.classList.add('card-buton-change')\n//   }\n//   if (addToQueueButton.textContent == \"Add to queue\") {\n//     addToQueueButton.textContent = \"Added to Queue\"\n//     addToQueueButton.classList.add('card-buton-change')\n//   }\n// });\n//   getWatchedMoviesInStorage();\n// }\n\n// function removeMovieFromQueue(movie) {\n//   const localStorageArr = JSON.parse(localStorage.getItem(KEY_QUEUE));\n//   const includesMovie = localStorageArr.find(elem => elem.id === movie.id);\n//   if (includesMovie) {\n//     const updatedArr = localStorageArr.filter(elem => elem.id !== movie.id);\n//     localStorage.setItem(KEY_QUEUE, JSON.stringify(updatedArr));\n//   }\n\n//   getQueueMoviesInStorage();\n// }\n\n\n"],"names":["$7pbsT","parcelRequire","$484f9a41a2f33c34$export$b3306cf7e559bc14","id","$484f9a41a2f33c34$var$_getMovieByID","apply","this","arguments","default","$parcel$interopDefault","$2TvXO","mark","_callee","movieObj","$gEIo3","getMovies","concat","_ctx","sent","console","log","data","error","t0","$1f7cb0515f52d0e3$var$openModalCard","document","querySelector","$1f7cb0515f52d0e3$var$closeModalCard","$1f7cb0515f52d0e3$var$modalCardCont","$1f7cb0515f52d0e3$var$backdrop","$1f7cb0515f52d0e3$var$cardContMarking","$1f7cb0515f52d0e3$var$cardTableContainer","$1f7cb0515f52d0e3$var$addToLSButtons","querySelectorAll","addEventListener","event","target","classList","contains","attributes","value","then","res","filmObject","markUPImg","poster_path","title","$1f7cb0515f52d0e3$var$currentMovie","insertAdjacentHTML","cardGenre","trimMarkupVote","$1f7cb0515f52d0e3$var$trimMarkup","vote_average","trimMarkupPopular","popularity","genres","length","markUp","vote_count","overview","forEach","btn","$1f7cb0515f52d0e3$var$onModalBtnClick","$1f7cb0515f52d0e3$var$cardMarkUp","remove","getElementsByTagName","add","$1f7cb0515f52d0e3$var$onCloseModalCard","evt","window","key","innerHTML","e","addTo","currentTarget","dataset","movie","watchedMovieInStorage","localStorage","getItem","setItem","JSON","stringify","watchedMovies","parse","find","item","addWatchedMovie","push","KEY_WATCHED","$1f7cb0515f52d0e3$var$addMoviesToStorage","classActive","textContent","$1f7cb0515f52d0e3$var$toggleBtn","activeBtn","trim","toFixed","addToQueueButton"],"version":3,"file":"library.ce5bf2f2.js.map"}