{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEOC,eAAeC,EAAaC,GAE/B,IACI,MAAMC,QAAiB,EAAAL,EAAAM,WAAU,UAAUF,IAFnC,KAE8C,GAEtD,OADAG,QAAQC,IAAIH,EAASI,MACdJ,EAASI,I,CAClB,MAAOC,GACLH,QAAQG,MAAMA,E;WCHtB,MAAMC,EAAgBC,SAASC,cAAc,yBACvCC,EAAiBF,SAASC,cAAc,0BACxCE,EAAgBH,SAASC,cAAc,oBACvCG,EAAWJ,SAASC,cAAc,cAClCI,EAAkBL,SAASC,cAAc,uBACzCK,EAAqBN,SAASC,cAAc,gBAC5CM,EAAiBP,SAASQ,iBAAiB,iBAEjDT,EAAcU,iBAAiB,SA+B/B,SAAyBC,GAEvB,GADAf,QAAQC,IAAIc,EAAMC,QACdD,EAAMC,OAAOC,UAAUC,SAAS,mBAAoB,CAMtDtB,EALemB,EAAMC,OAAOG,WAAWtB,GAAGuB,OAKrBC,MAAKC,GAS9B,SAAoBC,GAClBC,EAAeD,EACf,MAAME,EAAY,6DAA6DF,EAAWG,qBAAqBH,EAAWI,YAC1HjB,EAAgBkB,mBAAmB,aAAcH,GACjD,MAAMI,EAAiBC,EAAWP,EAAWQ,cACvCC,EAAoBF,EAAWP,EAAWU,YAEhD,IACIC,EADcX,EAAWY,OACDC,KAAIC,GAAQA,EAAKC,OAE7C,MAAMC,EAAS,iCAAiChB,EAAWI,mNAIIE,iCAA8CN,EAAWiB,uLAIhFR,sKAIAT,EAAWI,uLAIAO,iKAKfX,EAAWkB,6BAE/C9B,EAAmBiB,mBAAmB,aAAcW,GACpD3B,EAAe8B,SAAQC,GAAOA,EAAI7B,iBAAiB,QAAS8B,I,CA3CzBC,CAAWvB,KAE5Cd,EAAcS,UAAU6B,OAAO,YAChBzC,SAAS0C,qBAAqB,QAAQ,GAC9C9B,UAAU+B,IAAI,Y,CAEvB,M,IA5CFzC,EAAeO,iBAAiB,QAASmC,GACzCzC,EAAcM,iBAAiB,SAe/B,SAA8BoC,GAC5B,IAAKA,EAAIlC,OAAOC,UAAUC,SAAS,cACjC,OAEF+B,G,IAlBFE,OAAOrC,iBAAiB,WAqBxB,SAAoBoC,GACF,WAAZA,EAAIE,MACNH,IACAxC,EAASQ,UAAU+B,IAAI,a,IApB3B,IAAIxB,EAAe,KAEnB,SAASyB,IACPzC,EAAcS,UAAU+B,IAAI,YACb3C,SAAS0C,qBAAqB,QAAQ,GAC9C9B,UAAU6B,OAAO,aACxBpC,EAAgB2C,UAAY,GAC5B1C,EAAmB0C,UAAY,E,CAuEjC,SAAST,EAAgBU,GACvB,MAAMC,MAAEA,GAAUD,EAAEE,cAAcC,SAKpC,SAA4BL,EAAKM,GAC/B,MAAMC,EAAwBC,aAAaC,QAAQT,GACnD,IAAKO,EAEH,YADAC,aAAaE,QAAQV,EAAKW,KAAKC,UAAU,CAACN,KAG5C,IAAIO,EAAgBF,KAAKG,MAAMP,GACGM,EAAcE,MAC9CC,GAAQA,EAAKvE,KAAO6D,EAAM7D,MAK1BoE,EAAcI,KAAKX,GAFnBE,aAAaE,QAAQV,EAAKW,KAAKC,UAAUC,G,CAd3CK,CAAmBf,EAAO/B,E,CAqB5B,SAASM,EAAWyC,GAElB,OADmBA,EAAKC,QAAQ,E","sources":["src/services/MovieObjectByID.js","src/services/modalTemplate.js"],"sourcesContent":["import { getMovies } from \"./getMovies\";\n\nexport async function getMovieByID(id) {\n    const nul = null;\n    try {\n        const movieObj = await getMovies(`/movie/${id}`, nul, 1)\n        console.log(movieObj.data); //прилітає об'єкт з детальною інформацією\n        return movieObj.data\n    } catch (error) {\n        console.error(error);\n    }\n}\n\n//!!!!!!! функція не підключена до index.html\n// console.log(getMovieByID(990691));\n\n\n//id-шники для прикладу\n// 990691\n// 718789\n// 453395","import { getMovieByID } from './MovieObjectByID';\nimport {\n  getWatchedMoviesInStorage,\n  getQueueMoviesInStorage,\n} from './myLibraryPage';\n\nconst openModalCard = document.querySelector('[data-modalCard-open]');\nconst closeModalCard = document.querySelector('[data-modalCard-close]');\nconst modalCardCont = document.querySelector('[data-modalCard]');\nconst backdrop = document.querySelector('[backdrop]');\nconst cardContMarking = document.querySelector('.card__cont-marking');\nconst cardTableContainer = document.querySelector('.card__table');\nconst addToLSButtons = document.querySelectorAll('[data-add-to]');\n\nopenModalCard.addEventListener('click', onOpenModalCard);\ncloseModalCard.addEventListener('click', onCloseModalCard);\nmodalCardCont.addEventListener('click', onBackModalDropClick);\nwindow.addEventListener('keydown', onEscClick);\n\nconst KEY_WATCHED = 'watched-movies-in-storage';\nconst KEY_QUEUE = 'queue-movies-in-storage';\nlet currentMovie = null;\n\nfunction onCloseModalCard() {\n  modalCardCont.classList.add('no-activ');\n  const htmlEl = document.getElementsByTagName('HTML')[0];\n  htmlEl.classList.remove('no-scroll');\n  cardContMarking.innerHTML = '';\n  cardTableContainer.innerHTML = '';\n}\n\nfunction onBackModalDropClick(evt) {\n  if (!evt.target.classList.contains('card__cont')) {\n    return;\n  }\n  onCloseModalCard();\n}\n\nfunction onEscClick(evt) {\n  if (evt.key === 'Escape') {\n    onCloseModalCard();\n    backdrop.classList.add('is-hidden');\n  }\n}\n\nfunction onOpenModalCard(event) {\n  console.log(event.target);\n  if (event.target.classList.contains('grid-movie-card')) {\n    const filmID = event.target.attributes.id.value;\n\n    // addToQueueButton.classList.remove('card-buton-change')\n    // addToWatchedButton.classList.remove('card-buton-change')\n\n    getMovieByID(filmID).then(res => cardMarkUp(res));\n\n    modalCardCont.classList.remove('no-activ');\n    const htmlEl = document.getElementsByTagName('HTML')[0];\n    htmlEl.classList.add('no-scroll');\n  }\n  return;\n}\n\nfunction cardMarkUp(filmObject) {\n  currentMovie = filmObject;\n  const markUPImg = `<img class=\"card__img\" src=\"http://image.tmdb.org/t/p/w500${filmObject.poster_path}\" alt=\"${filmObject.title}\" />`;\n  cardContMarking.insertAdjacentHTML('afterbegin', markUPImg);\n  const trimMarkupVote = trimMarkup(filmObject.vote_average);\n  const trimMarkupPopular = trimMarkup(filmObject.popularity);\n\n  let markupGenre = filmObject.genres;\n  let cardGenre = markupGenre.map(genr => genr.name);\n\n  const markUp = `<h1 class=\"card__table-heder\">${filmObject.title}</h1>\n      <table class=\"card__table\">\n        <tr class=\"card__table-vote\">\n          <td class=\"card__table-name \">Vote / Votes</td>\n          <td class=\"card__table-value \"><span class=\"average\">${trimMarkupVote}</span> / <span class=\"vote\">${filmObject.vote_count}</span></td>\n        </tr>\n        <tr class=\"card__table-popularity\">\n          <td class=\"card__table-name\">Popularity</td>\n          <td class=\"card__table-value\">${trimMarkupPopular}</td>\n        </tr>\n        <tr class=\"card__table-title\">\n          <td class=\"card__table-name\">Original Title</td>\n          <td class=\"card__table-value\">${filmObject.title}</td>\n        </tr>\n        <tr class=\"card__table-genre\">\n          <td class=\"card__table-name last-child\">Genre</td>\n          <td class=\"card__table-value last-child\">${cardGenre}</td>\n        </tr>\n      </table>\n      <div class=\"card__about\">\n        <h2 class=\"card__about-heder\">About</h2>\n        <p class=\"card__about-text\">${filmObject.overview}</p>\n      </div>`;\n  cardTableContainer.insertAdjacentHTML('afterbegin', markUp);\n  addToLSButtons.forEach(btn => btn.addEventListener('click', onModalBtnClick));\n}\n\nfunction onModalBtnClick(e) {\n  const { addTo } = e.currentTarget.dataset;\n\n  addMoviesToStorage(addTo, currentMovie);\n}\n\nfunction addMoviesToStorage(key, movie) {\n  const watchedMovieInStorage = localStorage.getItem(key);\n  if (!watchedMovieInStorage) {\n    localStorage.setItem(key, JSON.stringify([movie]));\n    return;\n  }\n  let watchedMovies = JSON.parse(watchedMovieInStorage);\n  const watchedMoviesInStorageArr = watchedMovies.find(\n    item => item.id === movie.id\n  );\n  if (watchedMoviesInStorageArr) {\n    localStorage.setItem(key, JSON.stringify(watchedMovies));\n  } else {\n    watchedMovies.push(movie);\n    localStorage.setItem(key, JSON.stringify(watchedMovies));\n  }\n}\n\nfunction trimMarkup(trim) {\n  const trimMarkup = trim.toFixed(1);\n  return trimMarkup;\n}\n\n// function checkMovieByIdWatched(movie, key) {\n//   const lockalStorageId = JSON.parse(localStorage.getItem(key)) || [];\n//   console.log(lockalStorageId, 'Просмотренные фильмы');\n//   const includesMovie = lockalStorageId.find(elem => elem.id === movie.id);\n//   console.log(includesMovie, 'нука');\n//   if (!includesMovie) {\n//     addToWatchedButton.addEventListener('click', () =>\n//       addWatchedMoviesInStorage(movie)\n//     );\n//     addToWatchedButton.textContent = 'Add to watched';\n//   } else if (includesMovie) {\n//     addToWatchedButton.addEventListener('click', () =>\n//       removeMovieFromWatched(movie, key)\n//     );\n//     addToWatchedButton.textContent = 'Remove from watched';\n//   }\n// }\n// function checkMovieByIdQueue(movie, key) {\n//   const lockalStorageId = JSON.parse(localStorage.getItem(key)) || [];\n//   console.log(lockalStorageId, 'Просмотренные фильмы');\n//   const includesMovie = lockalStorageId.find(elem => elem.id === movie.id);\n\n//   if (!includesMovie) {\n//     console.log(lockalStorageId.includes(includesMovie));\n//     addToQueueButton.addEventListener('click', () =>\n//       addQueueMoviesInStorage(movie)\n//     );\n//     addToQueueButton.textContent = 'Add to queue';\n//   } else if (includesMovie) {\n//     addToQueueButton.addEventListener('click', () =>\n//       removeMovieFromQueue(movie, key)\n//     );\n//     addToQueueButton.textContent = 'Remove from queue';\n//   }\n// }\n\nfunction removeMovieFromWatched(movie) {\n  const localStorageArr = JSON.parse(localStorage.getItem(KEY_WATCHED));\n  const includesMovie = localStorageArr.find(elem => elem.id === movie.id);\n  if (includesMovie) {\n    const updatedArr = localStorageArr.filter(elem => elem.id !== movie.id);\n    localStorage.setItem(KEY_WATCHED, JSON.stringify(updatedArr));\n  }\n\n  getWatchedMoviesInStorage();\n}\n\nfunction removeMovieFromQueue(movie) {\n  const localStorageArr = JSON.parse(localStorage.getItem(KEY_QUEUE));\n  const includesMovie = localStorageArr.find(elem => elem.id === movie.id);\n  if (includesMovie) {\n    const updatedArr = localStorageArr.filter(elem => elem.id !== movie.id);\n    localStorage.setItem(KEY_QUEUE, JSON.stringify(updatedArr));\n  }\n\n  getQueueMoviesInStorage();\n}\n\n\n// Dynamic changing text-content on modal buttons \n\n// addToQueueButton.addEventListener('click', () => {\n//   if (addToQueueButton.textContent == \"Remove from queue\") {\n//     addToQueueButton.textContent = \"Removed from Queue\"\n//     addToQueueButton.classList.add('card-buton-change')\n//   }\n//   if (addToQueueButton.textContent == \"Add to queue\") {\n//     addToQueueButton.textContent = \"Added to Queue\"\n//     addToQueueButton.classList.add('card-buton-change')\n//   }\n// });\n\n// addToWatchedButton.addEventListener('click', () => {\n//   if (addToWatchedButton.textContent == \"Remove from watched\") {\n//     addToWatchedButton.textContent = \"Removed from watched\"\n//     addToWatchedButton.classList.add('card-buton-change')\n    \n//   }\n//   if (addToWatchedButton.textContent == \"Add to watched\") {\n//     addToWatchedButton.textContent = \"Added to Watched\"\n//     addToWatchedButton.classList.add('card-buton-change')\n//   }\n// });"],"names":["$diLRM","parcelRequire","async","$b6d92f438973dbcb$export$b3306cf7e559bc14","id","movieObj","getMovies","console","log","data","error","$8532299c9a64f3d8$var$openModalCard","document","querySelector","$8532299c9a64f3d8$var$closeModalCard","$8532299c9a64f3d8$var$modalCardCont","$8532299c9a64f3d8$var$backdrop","$8532299c9a64f3d8$var$cardContMarking","$8532299c9a64f3d8$var$cardTableContainer","$8532299c9a64f3d8$var$addToLSButtons","querySelectorAll","addEventListener","event","target","classList","contains","attributes","value","then","res","filmObject","$8532299c9a64f3d8$var$currentMovie","markUPImg","poster_path","title","insertAdjacentHTML","trimMarkupVote","$8532299c9a64f3d8$var$trimMarkup","vote_average","trimMarkupPopular","popularity","cardGenre","genres","map","genr","name","markUp","vote_count","overview","forEach","btn","$8532299c9a64f3d8$var$onModalBtnClick","$8532299c9a64f3d8$var$cardMarkUp","remove","getElementsByTagName","add","$8532299c9a64f3d8$var$onCloseModalCard","evt","window","key","innerHTML","e","addTo","currentTarget","dataset","movie","watchedMovieInStorage","localStorage","getItem","setItem","JSON","stringify","watchedMovies","parse","find","item","push","$8532299c9a64f3d8$var$addMoviesToStorage","trim","toFixed"],"version":3,"file":"library.60039ada.js.map"}